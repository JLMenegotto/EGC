(defun egc:acao ()
                       (and
	                      (setq cod (grread t))
			      (setq dev (car  cod))
                              (setq pco (cadr cod))
			      (/=   25         dev)
                              (/=   0          pco)
                       )
)

(defun egc:clicou?  () (= (car cod) 3))
(defun egc:enter?   () (= (car cod) 5))

(defun egc:1? () (egc:??   "1"   49    nil))
(defun egc:2? () (egc:??   "2"   50    nil))
(defun egc:3? () (egc:??   "3"   51    nil))
(defun egc:4? () (egc:??   "4"   52    nil))
(defun egc:5? () (egc:??   "5"   53    nil))
(defun egc:6? () (egc:??   "6"   54    nil))
(defun egc:7? () (egc:??   "7"   55    nil))
(defun egc:8? () (egc:??   "8"   56    nil))
(defun egc:9? () (egc:??   "9"   57    nil))
(defun egc:0? () (egc:??   "0"   58    nil))

(defun egc:+? () (egc:??   "+"   61    nil))
(defun egc:-? () (egc:??   "-"   45    nil))

(defun egc:a? () (egc:??   "A"   97    65))
(defun egc:b? () (egc:??   "B"   98    66))
(defun egc:c? () (egc:??   "C"   99    67))
(defun egc:d? () (egc:??   "D"  100    68))
(defun egc:e? () (egc:??   "E"  101    69))
(defun egc:f? () (egc:??   "F"  102    70))
(defun egc:g? () (egc:??   "G"  103    71))
(defun egc:h? () (egc:??   "H"  104    72))
(defun egc:i? () (egc:??   "I"  105    73))
(defun egc:j? () (egc:??   "J"  106    74))
(defun egc:k? () (egc:??   "K"  107    75))
(defun egc:l? () (egc:??   "L"  108    76))
(defun egc:m? () (egc:??   "M"  109    77))
(defun egc:n? () (egc:??   "N"  110    78))
(defun egc:o? () (egc:??   "O"  111    79))
(defun egc:p? () (egc:??   "P"  112    80))
(defun egc:q? () (egc:??   "Q"  113    81))
(defun egc:r? () (egc:??   "R"  114    82))
(defun egc:s? () (egc:??   "S"  115    83))
(defun egc:t? () (egc:??   "T"  116    84))
(defun egc:u? () (egc:??   "U"  117    85))
(defun egc:v? () (egc:??   "V"  118    86))
(defun egc:w? () (egc:??   "W"  119    87))
(defun egc:x? () (egc:??   "X"  120    88))
(defun egc:y? () (egc:??   "Y"  121    89))
(defun egc:z? () (egc:??   "Z"  122    90))

;;;                                                                                            
;;; Grava o carater informado na variável *base* e verifica se foi o carater pressionado       
;;;                                                                                            

(defun egc:?? (c n m)
                           (setq *Base* c)
  
                           (if (and n m)
                               (or      
			           (and (= (car cod) 2) (= pco n))
                                   (and (= (car cod) 2) (= pco m))
		               )
			           (and (= (car cod) 2) (= pco n))
			   )
)
